
Vector:similar element (same data either integer/float)

Week 1: 
1. Write a R Program to create and name a Vector 
2. Write a R program implement vector subsetting

  
1. Write a R Program to create and name a Vector 
  marks <- c(85, 90, 78, 92, 88)
OUTPUT:


2. Write a R program implement vector subsetting
  c() means combine — it creates a vector by combining values.
  Here, it creates a numeric vector with the marks:
# Print the original vector
print("Original Vector:")
print(marks)
OUTPUT:
print("Original Vector:")
[1] "Original Vector:"
> print(marks)
[1] 85 90 78 92 88

# Subset by position
print("Subset by position (1st and 3rd subjects):")
print(marks[c(1, 3)])

OUTPUT:
[1] "Subset by position (1st and 3rd subjects):"
> print(marks[c(1, 3)])
[1] 85 78

# Subset using a logical condition
print("Subjects with marks greater than 85:")
print(marks[marks > 85])
OUTPUT:
[1] "Subjects with marks greater than 85:"
> print(marks[marks > 85])
[1] 90 92 88

Week 2: 
1. Write a R Program to create and name a Matrix 
2. Write a R program implement Matrix Subsetting

Write a R Program to create and name a Matrix
# Create a matrix with 2 rows and 3 columns
scores <- matrix(
  c(85, 90, 78, 92, 88, 95),   # data elements
  nrow = 3,                    # number of rows
  ncol = 3,                    # number of columns
  byrow = TRUE                 # fill by rows
)
rownames(scores) <- c("Student1", "Student2")
print(scores)

OUTPUT:
       Math Science English
Student1   85      90      78
Student2   92      88      95







2. . Write a R program implement Matrix Subsetting
# Create a matrix
scores <- matrix(
  c(85, 90, 78, 92, 88, 95),   # data elements
  nrow = 2,                    # number of rows
  ncol = 3,                    # number of columns
  byrow = TRUE                 # fill by rows
)

OUTPUT:
scores
     [,1] [,2] [,3]
[1,]   85   90   78
[2,]   92   88   95

# Assign row and column names
rownames(scores) <- c("Student1", "Student2")
colnames(scores) <- c("Math", "Science", "English")

OUTPUT:
rownames(scores)
[1] "Student1" "Student2"
> colnames(scores)
[1] "Math"    "Science" "English"











# Print original matrix
print("Original Matrix:")
print(scores)
OUTPUT:
    Math Science English
Student1   85      90      78
Student2   92      88      95



# 1. Subset by position (row 1, column 2)
print("Element at Row 1, Column 2:")
print(scores[1, 2])

OUTPUT:
[1] 90

# 2. Subset an entire row
print("All subjects of Student1:")
print(scores[1, ])
OUTPUT:
Math Science English 
   85      90      78 

 # 3. Subset an entire column
print("Math scores of all students:")
print(scores[, "Math"])

OUTPUT:
Student1 Student2 
      85        92 

# 4. Subset using multiple rows and columns
print("Math and Science scores of both students:")
print(scores[, c("Math", "Science")])
OUTPUT:
        Math Science
Student1   85      90
Student2   92      88

# 5. Conditional subsetting
print("Scores greater than 85:")
print(scores[scores > 85])

OUTPUT:
[1] 92 90 88 95

     
Week 3: 
1. Write a R program to Access list elements and Manipulate list elements
2. Write a R program which converts list into a Vector


1. Write a R program to Access list elements and Manipulate list elements

# Create a list
# -----------------------------
my_list <- list(
  name = "Archana",
  age = 22,
  marks = c(85, 90, 78),
  passed = TRUE
)
# Accessing list elements
# -----------------------------
# Access using index
print(my_list[[1]])   # 1st element ("Archana")
OUTPUT:
print(my_list[[1]]) 
[1] "Archana"

# Access using name
print(my_list$name)   # "Archana"
print(my_list$marks)  # c(85, 90, 78)
OUTPUT:
print(my_list$marks)  # c(85, 90, 78)
[1] 85 90 78

# Access multiple elements using subset
print(my_list[c("name", "age")])
OUTPUT:
$age
[1] 23

# -----------------------------
# Manipulating list elements
# -----------------------------
# Update an element
my_list$age <- 23
print(my_list$age)   # 23
OUTPUT:
[1] 23

# Add a new element
my_list$grade <- "A"
print(my_list)
OUTPUT:
$marks
[1] 85 90 78


$passed
[1] TRUE


$grade
[1] "A"
# Remove an element (set to NULL)
my_list$passed <- NULL
print(my_list)
# Modify vector inside list
my_list$marks[2] <- 95   # change 90 to 95
print(my_list$marks)
OUTPUT:
[1] 85 95 78

# -----------------------------
# Final List
# -----------------------------
print("Final List:")
print(my_list)
 2. Write a R program which converts list into a Vector
# -----------------------------
# Create a list
# -----------------------------
my_list <- list(10, 20, 30, 40)
# -----------------------------
# Convert list to vector
# -----------------------------
my_vector <- unlist(my_list)
# -----------------------------
# Print results
# -----------------------------
print("Original List:")
print(my_list)
print("Converted Vector:")
print(my_vector)
print("Type of my_vector:")
print(typeof(my_vector))
Example with Mixed Types
mixed_list <- list(10, "Archana", TRUE)
mixed_vector <- unlist(mixed_list)

print(mixed_vector)
print(typeof(mixed_vector)) 
OUTPUT:
print(mixed_vector)
[1] "10"      "Archana" "TRUE"   
>       print(typeof(mixed_vector))
[1] "character"

Explanation
Explanation
Create a list
my_list <- list(10, 20, 30, 40)
This is a list containing 4 numeric elements.
Convert to vector
my_vector <- unlist(my_list)
unlist() flattens the list into a single vector.
Result
my_list is still a list with separate elements.
my_vector is a numeric vector: c(10, 20, 30, 40).
typeof(my_vector) → "double" (since numbers are stored as double in R).
Week 4: 
1. Write a R program to Control flow statements: i. If condition ii. If-else condition
 2. Write a R program to implement Iterative statements: i. For loop ii. While loop 
3. Write a R program to demonstrate usage of 
1. Write a R program to Control flow statements: i. If condition ii. If-else condition 
2. Write a R program to implement Iterative statements: i. For loop ii. While loop
 3. Write a R program to demonstrate usage of
 i. Repeat 
I) If condition ii. If-else condition
ii. Write a R program to implement Iterative statements:
I.For loop
ii.While loop
III. Write a R program to demonstrate usage of
i.Repeat
ii.Break
iii.Return
iv.Next

1.Write a R program to Control flow statements: i. If condition ii. If-else condition
# Example 1: IF condition
x <- 15
if (x > 10) {
  print("x is greater than 10")
}
Example 2: IF-ELSE condition
y <- 8
if (y %% 2 == 0) {
  print("y is even")
} else {
  print("y is odd")
}
Loops:
For Loop
# For loop example
fruits <- c("Apple", "Banana", "Cherry")
for (fruit in fruits) {
  print(fruit)
}
OUTPUT:
"Apple"
[1] "Banana"
[1] "Cherry"
While Loop
# While loop example
i <- 1
while (i <= 5) {
  print(i)
  i <- i + 1
}
OUTPUT:
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5

III.
Control Statements
Repeat
# Repeat example
i <- 1
repeat {
  print(i)
  i <- i + 1
  if (i > 5) {
    break
  }
}
OUTPUT:
1] 1
[1] 2
[1] 3
[1] 4
[1] 5
Break

# Break example
for (i in 1:5) {
  if (i == 3) {
    break
  }
  print(i)
}
OUTPUT:
[1] 1
[1] 2

Return
# Return example
my_function <- function(x) {
  if (x > 5) {
    return("x is greater than 5")
  } else {
    return("x is less than or equal to 5")
  }
}
print(my_function(10))
OUTPUT:
1] "x is greater than 5"


Next

# Next example
for (i in 1:5) {
  if (i == 3) {
    next
  }
  print(i)
}
OUTPUT:
[1] 1
[1] 2
[1] 4
[1] 5


WEEK5
a. Write a R program to find reverse of a given number using functions

reverse_number <- function(number) 
  {
  # Initialize the variable to store the reversed number
  reversed_num <- 0
  
  # Use a while loop to process each digit
  while (number > 0)
  {
    # Extract the last digit
    digit <- number %% 10
    
    # Add the digit to the reversed number in the correct position
    reversed_num <- reversed_num * 10 + digit
    
    # Remove the last digit from the original number using integer division
    number <- number %/% 10
  }
  
  # Return the reversed number
  return(reversed_num)
}
# Example usage:
num_to_reverse <- 12345
reversed_result <- reverse_number(num_to_reverse)
cat("The reverse of", num_to_reverse, "is:", reversed_result, "\n")

num_to_reverse_2 <- 9876
reversed_result_2 <- reverse_number(num_to_reverse_2)
cat("The reverse of", num_to_reverse_2, "is:", reversed_result_2, "\n")










Output:
The reverse of 12345 is: 54321 
The reverse of 9876 is: 6789 

=== Code Execution Successful ===
B. Write a R program to find factorial of a given number using recursion
# Define a function to calculate the factorial of a given number using recursion
factorial_recursive <- function(n) 
{
  # Base case: Factorial of 0 is 1
  if (n == 0) 
{
    return(1)
  } 
  # Recursive case: Calculate factorial using recursion
  else 
{
    return(n * factorial_recursive(n - 1))
  }
}

# Test the function with an example input
number <- 5 
result <- factorial_recursive(number)

# Print the result
cat("The factorial of", number, "is:", result, "\n")

Output:
The factorial of 5 is: 120 
=== Code Execution Successful ===

6. a. Write a R program to demonstrate R Packages
# 1. Install a package (if not already installed)
# The 'ggplot2' package is used for creating high-quality graphics.
if (!requireNamespace("ggplot2", quietly = TRUE)) {
  install.packages("ggplot2")
}

# 2. Load the installed package
# This makes the functions within the package available for use.
library(ggplot2)

# 3. Use a function from the loaded package
# Create a simple data frame
data_example <- data.frame(
  x_values = 1:10,
  y_values = (1:10)^2
)

# Create a scatter plot using ggplot2
ggplot(data_example, aes(x = x_values, y = y_values)) +
  geom_point() +
  labs(title = "Demonstration of ggplot2 Package",
       x = "X-axis Label",
       y = "Y-axis Label")

# 4. Detach a package (optional)
# This removes the package from the search path, making its functions unavailable
# unless loaded again.
# detach("package:ggplot2", unload = TRUE)

